import math
from bots.BilateralClosedDeterministic import BilateralClosedDeterministic
from game.BilateralClosedDeterministicGame import BilateralClosedDeterministicGame
from bots.BilateralClosedMixed import BilateralClosedMixed
from game.BilateralClosedMixedGame import BilateralClosedMixedGame
from bots.BilateralOCostDeterministic import BilateralOCostDeterministic
from game.BilateralOCostDeterministicGame import BilateralOCostDeterministicGame
from bots.BilateralOCostMixed import BilateralOCostMixed
from game.BilateralOCostMixedGame import BilateralOCostMixedGame
from bots.BilateralOpenMixed import BilateralOpenMixed
from game.BilateralOpenMixedGame import BilateralOpenMixedGame
from bots.BilateralOpenDeterministic import BilateralOpenDeterministic
from game.BilateralOpenDeterministicGame import BilateralOpenDeterministicGame

from strategies.TitForTat import TitForTat
from strategies.TitForTwoTats import TitForTwoTats
from strategies.Pavlov import Pavlov
from strategies.GrimTrigger import GrimTrigger
from strategies.AlwaysDefect import AlwaysDefect

# Define strategies
titForTat = TitForTat()
titForTwoTats = TitForTwoTats() # titfortat ile ayni yaoiyor
pavlov = Pavlov()
grimTrigger = GrimTrigger()
alwaysDefect = AlwaysDefect() # reverse titfortat olmus degismesi lazim

playerTypes0 = [[titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,False, False],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,False, False],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,False, False],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,False, False]]
playerProbs0 = [0.25,0.25,0.25,0.25]

playerTypes1 = [[titForTwoTats, titForTat, pavlov, grimTrigger, 0, 50, 100, 0, 2],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100, 100, 0, 1],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 0, 100, 0, 3],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100, 100, 0, 4]]
playerProbs1 = [0.25,0.25,0.25,0.25]

playerTypes2 = [[titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,0,False, False],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,0,False, False],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,0,False, False],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,0,False, False]]
playerProbs2 = [0.25,0.25,0.25,0.25]

playerTypes3 = [[titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,0,0, 0],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,0,0, 0],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,0,0, 0],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100,100,0,0, 0]]
playerProbs3 = [0.25,0.25,0.25,0.25]

playerTypes4 = [[titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100, 100, 0, 1],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100, 100, 0, 1],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100, 100, 0, 1],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100, 100, 0, 1]]
playerProbs4 = [0.25,0.25,0.25,0.25]

playerTypes5 = [[titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100, False, False],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100, False, False],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100, False, False],
               [titForTwoTats, titForTat, pavlov, grimTrigger, 0, 100, False, False]]
playerProbs5 = [0.25,0.25,0.25,0.25]

def tournament(gameType, gameCount, playerCount, playerTypes, playerProbs):
    bots = []
    if gameType == 0:
        bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        count = 0
        for i in range(len(playerTypes)):
            for n in range((math.floor(playerCount*playerProbs[i]))):      
                bot = BilateralClosedDeterministic( 
                playerTypes[i][0], playerTypes[i][1], playerTypes[i][2], playerTypes[i][3], 
                budget=playerTypes[i][4], 
                coopCommitProb=playerTypes[i][5], 
                assumeCommitProb=playerTypes[i][6], 
                commitType=playerTypes[i][7], 
                opponentCoopCommitType=playerTypes[i][8])
                bots.append(bot)

        for i in range(playerCount):
            for n in range(playerCount):
                if i < n:
                    print("Game",count,"****************************************************************************************")
                    BilateralClosedDeterministicGame(
                    bots[i], 
                    bots[n], 
                    bot1PayoffMatrix, 
                    bot2PayoffMatrix, 
                    game_length=7, 
                    commitment=+1, 
                    punishment=-1).gametime()
                    bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    count += 1
        
    elif gameType == 1:
        bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        count = 0
        for i in range(len(playerTypes)):
            for n in range((math.floor(playerCount*playerProbs[i]))):      
                bot = BilateralClosedMixed(
                playerTypes[i][0], playerTypes[i][1], playerTypes[i][2], playerTypes[i][3], 
                budget=playerTypes[i][4], 
                coopCommitProb=playerTypes[i][5],  
                assumeCommitProb=playerTypes[i][6], 
                opponentCommitProb=playerTypes[i][7], 
                seed=playerTypes[i][8]  # Default seed value
                )
                bots.append(bot)

        for i in range(playerCount):
            for n in range(playerCount):
                if i < n:
                    print("Game",count,"****************************************************************************************")
                    BilateralClosedMixedGame(
                    bots[i], 
                    bots[n], 
                    bot1PayoffMatrix, 
                    bot2PayoffMatrix, 
                    game_length=7, 
                    commitment=+1, 
                    punishment=-1
                    ).gametime()
                    bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    count += 1

    elif gameType == 2:
        bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        count = 0
        for i in range(len(playerTypes)):
            for n in range((math.floor(playerCount*playerProbs[i]))):      
                bot = BilateralOCostDeterministic(
                playerTypes[i][0], playerTypes[i][1], playerTypes[i][2], playerTypes[i][3],  
                budget=playerTypes[i][4], 
                coopCommitProb=playerTypes[i][5], 
                assumeCommitProb=playerTypes[i][6],  
                payProb=playerTypes[i][7], 
                commitType=playerTypes[i][8],  # Default value for commitType
                opponentCoopCommitType=playerTypes[i][9]  # Default value for opponentCoopCommitType
            )
                bots.append(bot)

        for i in range(playerCount):
            for n in range(playerCount):
                if i < n:
                    print("Game",count,"****************************************************************************************")
                    BilateralOCostDeterministicGame(
                    bots[i], 
                    bots[n], 
                    bot1PayoffMatrix, 
                    bot2PayoffMatrix, 
                    game_length=7, 
                    commitment=+1, 
                    punishment=-1, 
                    observation_cost=3  # Add observation cost parameter
                    ).gametime()
                    bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    count += 1
                 
    elif gameType == 3:
        bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        count = 0
        for i in range(len(playerTypes)):
            for n in range((math.floor(playerCount*playerProbs[i]))):      
                bot =BilateralOCostMixed(
                playerTypes[i][0], playerTypes[i][1], playerTypes[i][2], playerTypes[i][3], playerTypes[i][4], 
                playerTypes[i][5], 
                playerTypes[i][6],  
                playerTypes[i][7], 
                playerTypes[i][8], 
                playerTypes[i][9])
                bots.append(bot)

        for i in range(playerCount):
            for n in range(playerCount):
                if i < n:
                    print("Game",count,"****************************************************************************************")
                    BilateralOCostMixedGame(bots[i], bots[n], bot1PayoffMatrix, bot2PayoffMatrix, 7, +1, -1, 3).gametime()
                    bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    count += 1

    elif gameType == 4:
        bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        count = 0
        for i in range(len(playerTypes)):
            for n in range((math.floor(playerCount*playerProbs[i]))):      
                bot =BilateralOpenMixed(
                playerTypes[i][0], playerTypes[i][1], playerTypes[i][2], playerTypes[i][3], 
                budget=playerTypes[i][4], 
                coopCommitProb=playerTypes[i][5], 
                opponentCoopCommitProb=playerTypes[i][6], 
                seed=playerTypes[i][7]  # Default seed value
                )
                bots.append(bot)

        for i in range(playerCount):
            for n in range(playerCount):
                if i < n:
                    print("Game",count,"****************************************************************************************")
                    BilateralOpenMixedGame(
                    bots[i], 
                    bots[n], 
                    bot1PayoffMatrix, 
                    bot2PayoffMatrix, 
                    game_length=7, 
                    commitment=+1, 
                    punishment=-1).gametime()
                    bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    count += 1
    
    elif gameType == 5:
        bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
        count = 0
        for i in range(len(playerTypes)):
            for n in range((math.floor(playerCount*playerProbs[i]))):      
                bot =BilateralOpenDeterministic(
                playerTypes[i][0], playerTypes[i][1], playerTypes[i][2], playerTypes[i][3],
                budget=playerTypes[i][4], 
                coopCommitProb=playerTypes[i][5],  
                commitType=playerTypes[i][6], 
                opponentCoopCommitType=playerTypes[i][7])  
                bots.append(bot)

        for i in range(playerCount):
            for n in range(playerCount):
                if i < n:
                    print("Game",count,"****************************************************************************************")
                    BilateralOpenDeterministicGame(
                    bots[i], 
                    bots[n], 
                    bot1PayoffMatrix, 
                    bot2PayoffMatrix, 
                    game_length=7, 
                    commitment=+1, 
                    punishment=-1
                    ).gametime()
                    bot1PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    bot2PayoffMatrix = {"CC": 3, "DC": 5, "CD": 0, "DD": 1}
                    count += 1

#tournament(0,0,4,playerTypes0, playerProbs0)
#tournament(1,0,4,playerTypes1, playerProbs1)
#tournament(2,0,4,playerTypes2, playerProbs2)
#tournament(3,0,4,playerTypes3, playerProbs3)
#tournament(4,0,4,playerTypes4, playerProbs4)
tournament(5,0,4,playerTypes5, playerProbs5)

#*********************************************************************************************************************

#unilateral closed deterministic
# unilateralClosedDeterministicGame = UnilateralClosedDeterministicGame(
#     bot1=unilateralClosedDeterministicBot1, 
#     bot2=unilateralClosedDeterministicBot2, 
#     bot1PayoffMatrix=bot1PayoffMatrix, 
#     bot2PayoffMatrix=bot2PayoffMatrix, 
#     game_length=7, 
#     commitment=+1, 
#     punishment=-1
# )

#unilateral closedes mixed
# unilateralClosedMixedGame = UnilateralClosedMixedGame(
#     bot1=unilateralClosedMixedBot1, 
#     bot2=unilateralClosedMixedBot2, 
#     bot1PayoffMatrix=bot1PayoffMatrix, 
#     bot2PayoffMatrix=bot2PayoffMatrix, 
#     game_length=7, 
#     commitment=+1, 
#     punishment=-1
# )

# unilateral o cost deterministic
# unilateralOCostDeterministicGame = UnilateralOCostDeterministicGame(
#     bot1=unilateralOCostDeterministicBot1, 
#     bot2=unilateralOCostDeterministicBot2, 
#     bot1PayoffMatrix=bot1PayoffMatrix, 
#     bot2PayoffMatrix=bot2PayoffMatrix, 
#     game_length=7, 
#     commitment=+1, 
#     punishment=-1, 
#     observation_cost=3  # Example value for observation_cost
# )

#unilateral ocost mixed
# unilateralOCostMixedGame = UnilateralOCostMixedGame(
#     bot1=unilateralOCostMixedBot1, 
#     bot2=unilateralOCostMixedBot2, 
#     bot1PayoffMatrix=bot1PayoffMatrix, 
#     bot2PayoffMatrix=bot2PayoffMatrix, 
#     game_length=7, 
#     commitment=+1, 
#     punishment=-1, 
#     observation_cost=3  # Example value for observation_cost
# )

#unilateral open deterministic
# unilateralOpenDeterministicGame = UnilateralOpenDeterministicGame(
#     bot1=unilateralOpenDeterministicBot1, 
#     bot2=unilateralOpenDeterministicBot2, 
#     bot1PayoffMatrix=bot1PayoffMatrix, 
#     bot2PayoffMatrix=bot2PayoffMatrix, 
#     game_length=7, 
#     commitment=+1, 
#     punishment=-1  # Example values for commitment and punishment
# )

#unilateral open mixed
# unilateralOCostMixedGame = UnilateralOCostMixedGame(
#     bot1=unilateralOCostMixedBot1, 
#     bot2=unilateralOCostMixedBot2, 
#     bot1PayoffMatrix=bot1PayoffMatrix, 
#     bot2PayoffMatrix=bot2PayoffMatrix, 
#     game_length=7, 
#     commitment=+1, 
#     punishment=-1, 
#     observation_cost=3  # Example value for observation_cost
# )